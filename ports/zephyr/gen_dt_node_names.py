#!/usr/bin/env python3

import argparse
import os
import sys
import pickle
import re

# This is needed by the "pickle.load" call below
zephyr_base = os.environ["ZEPHYR_BASE"]
sys.path.insert(0, os.path.join(zephyr_base, "scripts", "dts", "python-devicetree", "src"))

# The prefixes to look for in the device tree
prefixes = ("gpio", "spi", "i2c", "uart")

# Prefix for the generated header
header_prefix = """#ifndef MICROPY_INCLUDED_ZEPHYR_GEN_DT_NODE_NAMES_H
#define MICROPY_INCLUDED_ZEPHYR_GEN_DT_NODE_NAMES_H

struct dt_node_name_map {
    const char *const gen_name;
    const char *const actual_name;
};

static const struct dt_node_name_map dt_node_map[] = {
"""
# Suffix for the generated header
header_sufix = """};

#endif
"""

def main():
    parser = argparse.ArgumentParser(description="Generate friendly names for Zephyr DT nodess")
    parser.add_argument("-i", "--input", required=True, help="path to edt.pickle")
    parser.add_argument("-o", "--output", required=True, help="path to the output file")
    args = parser.parse_args()

    # Load the representation of the device tree generated by Zephyr
    with open(args.input, 'rb') as f:
        edt = pickle.load(f)

    # Create regular expressions for all prefix that we need to check
    all_re = re.compile(fr'^({"|".join(prefixes)})(\d+)$')

    # Look in the device tree for all nodes with labels
    name_map = {}
    for n in edt.nodes:
        if n.status == "okay": # consider only nodes that are enabled
            # Check prefixes for all labels
            for l in n.labels:
                found = all_re.match(l)
                if found != None:
                    # Transform name (from "gpio0" to "GPIO_0" and so on)
                    new_name = found.group(1).upper() + "_" + found.group(2)
                    name_map[new_name] = n.name
                    break

    # Write data to output file
    with open(args.output, "wt") as f:
        f.write(header_prefix)
        for n in name_map:
            f.write(f'    {{"{n}", "{name_map[n]}"}},\n')
        f.write("    {NULL, NULL}\n")
        f.write(header_sufix)

if __name__ == "__main__":
    main()